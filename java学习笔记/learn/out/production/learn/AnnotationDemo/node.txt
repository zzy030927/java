注解本身是一个接口,所有注解默认继承Annotation接口
格式:
public @interface 注解名 {
    属性列表（相当于抽象方法）
}
属性: 接口中的抽象方法
    要求:
      1. 属性的返回值类型可以是: 基本数据类型,String,枚举,注解,Class（某个类的Class对象）,以上类型的一维数组
      2. 定义了属性，使用了default关键字默认初始化值，那么使用属性时，不用初始化该属性。
         如果属性只有一个要进行赋值，并且属性的名称为value，那么使用注解时初始化属性不用加注解名字
系统注解
    @Override: 表示复写父类中的方法
    @Deprecated: 表示该方法被弃用
    @SuppressWarnings: 压制警告
        一般传递的参数为 all，@SuppressWarnings("all") 表示压制所有警告
元注解：用于描述注解的注解
    @Target: 表示此注解的作用范围，常用可选项为：类、方法、变量
             参数为 ElementType[] value
             ElementType取值：
                TYPE：可以作用于类上
                METHOD：可以作用于方法上
                FIELD：可以作用于成员变量上
    @Retention: 表示此注解在什么时候起效，有三个选项。基本选择RUNTIME
        -@Retention(RetentionPolicy.SOURCE)：该注解只保留在源代码中，编译时和运行时都不保留。
        -@Retention(RetentionPolicy.CLASS)：该注解保留在class文件中，但在运行时不会加载到内存中。
        -@Retention(RetentionPolicy.RUNTIME)：该注解保留在运行时，会被加载到内存中（也就是被JVM读取到），可以被反射机制获取到。
    @Documented: 表示此注解是否被写入api文档中
    @Inherited: 表示此注解修饰的子类，是否能被继承
解析注解：获取注解中定义的属性值 看ReflectDemo中的代码
    1. 获取注解定义的位置的对象
    2. 获取指定注解 getAnnotation(Class 注解名.class)
    3. 调用注解中的抽象方法获取配置的属性值